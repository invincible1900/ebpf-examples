/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __KPROBE_BPF_SKEL_H__
#define __KPROBE_BPF_SKEL_H__

#include <stdlib.h>
#include <bpf/libbpf.h>

struct kprobe_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *hash_map;
	} maps;
	struct {
		struct bpf_program *security_mmap_file;
	} progs;
	struct {
		struct bpf_link *security_mmap_file;
	} links;
};

static void
kprobe_bpf__destroy(struct kprobe_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
kprobe_bpf__create_skeleton(struct kprobe_bpf *obj);

static inline struct kprobe_bpf *
kprobe_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct kprobe_bpf *obj;

	obj = (struct kprobe_bpf *)calloc(1, sizeof(*obj));
	if (!obj)
		return NULL;
	if (kprobe_bpf__create_skeleton(obj))
		goto err;
	if (bpf_object__open_skeleton(obj->skeleton, opts))
		goto err;

	return obj;
err:
	kprobe_bpf__destroy(obj);
	return NULL;
}

static inline struct kprobe_bpf *
kprobe_bpf__open(void)
{
	return kprobe_bpf__open_opts(NULL);
}

static inline int
kprobe_bpf__load(struct kprobe_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct kprobe_bpf *
kprobe_bpf__open_and_load(void)
{
	struct kprobe_bpf *obj;

	obj = kprobe_bpf__open();
	if (!obj)
		return NULL;
	if (kprobe_bpf__load(obj)) {
		kprobe_bpf__destroy(obj);
		return NULL;
	}
	return obj;
}

static inline int
kprobe_bpf__attach(struct kprobe_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
kprobe_bpf__detach(struct kprobe_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline int
kprobe_bpf__create_skeleton(struct kprobe_bpf *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		return -1;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "kprobe_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "hash_map";
	s->maps[0].map = &obj->maps.hash_map;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "security_mmap_file";
	s->progs[0].prog = &obj->progs.security_mmap_file;
	s->progs[0].link = &obj->links.security_mmap_file;

	s->data_sz = 3664;
	s->data = (void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x10\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x0c\0\x79\x11\x68\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\x63\x2a\xfc\xff\0\0\0\0\x7b\
\x2a\xf0\xff\0\0\0\0\x7b\x2a\xe8\xff\0\0\0\0\x7b\x2a\xe0\xff\0\0\0\0\x7b\x2a\
\xd8\xff\0\0\0\0\x7b\x2a\xd0\xff\0\0\0\0\x7b\x2a\xc8\xff\0\0\0\0\x7b\x2a\xc0\
\xff\0\0\0\0\x7b\x2a\xb8\xff\0\0\0\0\x7b\x2a\xb0\xff\0\0\0\0\x7b\x2a\xa8\xff\0\
\0\0\0\x7b\x2a\xa0\xff\0\0\0\0\x7b\x2a\x98\xff\0\0\0\0\x7b\x2a\x90\xff\0\0\0\0\
\x7b\x2a\x88\xff\0\0\0\0\x7b\x2a\x80\xff\0\0\0\0\x7b\x2a\x78\xff\0\0\0\0\x7b\
\x2a\x70\xff\0\0\0\0\x7b\x2a\x68\xff\0\0\0\0\x7b\x2a\x60\xff\0\0\0\0\x57\x01\0\
\0\x04\0\0\0\x15\x01\x14\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\
\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\xbf\x06\0\0\0\0\0\
\0\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\x60\xff\xff\xff\x15\x06\x05\0\0\0\0\0\xbf\
\x61\0\0\0\0\0\0\x07\x01\0\0\x08\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\
\0\xbf\x63\0\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x02\0\0\0\xb7\0\0\0\
\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\
\x01\0\x18\0\0\0\0\0\0\0\xe4\x02\0\0\xe4\x02\0\0\x78\x02\0\0\0\0\0\0\x04\0\0\
\x04\x20\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\x40\0\0\0\x12\0\
\0\0\x08\0\0\0\x80\0\0\0\x16\0\0\0\x09\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\x02\x04\0\
\0\0\x1c\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\
\0\0\x05\0\0\0\x01\0\0\0\x20\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\x02\x07\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\0\x20\0\0\0\0\0\0\
\0\0\0\x02\x03\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x34\0\0\0\x04\0\0\x04\x98\0\0\
\0\x3a\0\0\0\x03\0\0\0\0\0\0\0\x3e\0\0\0\x03\0\0\0\x20\0\0\0\x43\0\0\0\x0c\0\0\
\0\x40\0\0\0\x48\0\0\0\x0d\0\0\0\xc0\0\0\0\x51\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\
\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\x05\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x0b\0\0\0\x05\0\0\0\x7f\0\0\0\x56\0\0\0\0\0\0\x0e\x01\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\x02\x10\0\0\0\x5f\0\0\0\x15\0\0\x04\xa8\0\0\0\x67\0\0\0\x11\
\0\0\0\0\0\0\0\x6b\0\0\0\x11\0\0\0\x40\0\0\0\x6f\0\0\0\x11\0\0\0\x80\0\0\0\x73\
\0\0\0\x11\0\0\0\xc0\0\0\0\x77\0\0\0\x11\0\0\0\0\x01\0\0\x7a\0\0\0\x11\0\0\0\
\x40\x01\0\0\x7d\0\0\0\x11\0\0\0\x80\x01\0\0\x81\0\0\0\x11\0\0\0\xc0\x01\0\0\
\x85\0\0\0\x11\0\0\0\0\x02\0\0\x88\0\0\0\x11\0\0\0\x40\x02\0\0\x8b\0\0\0\x11\0\
\0\0\x80\x02\0\0\x8e\0\0\0\x11\0\0\0\xc0\x02\0\0\x91\0\0\0\x11\0\0\0\0\x03\0\0\
\x94\0\0\0\x11\0\0\0\x40\x03\0\0\x97\0\0\0\x11\0\0\0\x80\x03\0\0\x9a\0\0\0\x11\
\0\0\0\xc0\x03\0\0\xa2\0\0\0\x11\0\0\0\0\x04\0\0\xa5\0\0\0\x11\0\0\0\x40\x04\0\
\0\xa8\0\0\0\x11\0\0\0\x80\x04\0\0\xae\0\0\0\x11\0\0\0\xc0\x04\0\0\xb1\0\0\0\
\x11\0\0\0\0\x05\0\0\xb4\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\
\x0d\x03\0\0\0\xc6\0\0\0\x0f\0\0\0\xca\0\0\0\x01\0\0\x0c\x12\0\0\0\0\0\0\0\0\0\
\0\x03\0\0\0\0\x0b\0\0\0\x05\0\0\0\x0d\0\0\0\x62\x02\0\0\0\0\0\x0e\x14\0\0\0\
\x01\0\0\0\x6a\x02\0\0\x01\0\0\x0f\0\0\0\0\x0e\0\0\0\0\0\0\0\x20\0\0\0\x70\x02\
\0\0\x01\0\0\x0f\0\0\0\0\x15\0\0\0\0\0\0\0\x0d\0\0\0\0\x74\x79\x70\x65\0\x6d\
\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\
\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\
\x45\x5f\x5f\0\x65\x76\x65\x6e\x74\0\x70\x69\x64\0\x70\x70\x69\x64\0\x63\x6f\
\x6d\x6d\0\x66\x69\x6c\x65\x6e\x61\x6d\x65\0\x63\x68\x61\x72\0\x68\x61\x73\x68\
\x5f\x6d\x61\x70\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\
\x72\x31\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\
\x72\x39\0\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\
\x69\x67\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\
\x73\0\x6c\x6f\x6e\x67\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\
\x63\x74\x78\0\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x6d\x6d\x61\x70\x5f\x66\x69\
\x6c\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x6d\
\x6d\x61\x70\x5f\x66\x69\x6c\x65\0\x30\x3a\x31\x33\0\x2f\x72\x6f\x6f\x74\x2f\
\x67\x69\x74\x68\x6f\x6d\x65\x2f\x65\x62\x70\x66\x2d\x65\x78\x61\x6d\x70\x6c\
\x65\x73\x2f\x6c\x69\x62\x62\x70\x66\x2d\x74\x65\x73\x74\x2f\x65\x78\x61\x6d\
\x70\x6c\x65\x73\x2f\x6d\x61\x70\x2d\x74\x65\x73\x74\x2f\x6b\x70\x72\x6f\x62\
\x65\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\
\x42\x45\x28\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x6d\x6d\x61\x70\x5f\x66\x69\
\x6c\x65\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x66\x69\x6c\x65\x20\x2a\x66\x69\
\x6c\x65\x2c\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x70\
\x72\x6f\x74\x2c\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\
\x66\x6c\x61\x67\x73\x29\0\x09\x69\x6e\x74\x20\x6b\x65\x79\x20\x3d\x20\x30\x3b\
\0\x09\x73\x74\x72\x75\x63\x74\x20\x65\x76\x65\x6e\x74\x20\x69\x6e\x69\x74\x76\
\x61\x6c\x20\x3d\x20\x7b\x7d\x3b\0\x09\x69\x66\x28\x21\x28\x70\x72\x6f\x74\x20\
\x26\x20\x56\x4d\x5f\x45\x58\x45\x43\x29\x29\0\x09\x76\x61\x6c\x70\x20\x3d\x20\
\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\
\x28\x26\x68\x61\x73\x68\x5f\x6d\x61\x70\x2c\x20\x26\x6b\x65\x79\x29\x3b\0\x09\
\x69\x66\x20\x28\x21\x76\x61\x6c\x70\x29\x20\x7b\x09\x09\0\x20\x20\x20\x20\x20\
\x20\x20\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\
\x63\x6f\x6d\x6d\x28\x26\x28\x76\x61\x6c\x70\x2d\x3e\x63\x6f\x6d\x6d\x29\x2c\
\x20\x73\x69\x7a\x65\x6f\x66\x28\x76\x61\x6c\x70\x2d\x3e\x63\x6f\x6d\x6d\x29\
\x29\x3b\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\
\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xdc\0\0\0\
\xf0\0\0\0\x1c\0\0\0\x08\0\0\0\xdd\0\0\0\x01\0\0\0\0\0\0\0\x13\0\0\0\x10\0\0\0\
\xdd\0\0\0\x0d\0\0\0\0\0\0\0\xfc\0\0\0\x43\x01\0\0\x05\x54\0\0\x10\0\0\0\xfc\0\
\0\0\xa2\x01\0\0\x06\x60\0\0\x18\0\0\0\xfc\0\0\0\xb0\x01\0\0\x0f\x68\0\0\xb0\0\
\0\0\xfc\0\0\0\xcc\x01\0\0\x0c\x98\0\0\xb8\0\0\0\xfc\0\0\0\xcc\x01\0\0\x05\x98\
\0\0\xc8\0\0\0\xfc\0\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\xfc\0\0\0\xe3\x01\0\0\x09\
\xa0\0\0\xf8\0\0\0\xfc\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\xfc\0\0\0\x11\x02\0\0\
\x06\xa4\0\0\x08\x01\0\0\xfc\0\0\0\x21\x02\0\0\x26\xb4\0\0\x18\x01\0\0\xfc\0\0\
\0\x21\x02\0\0\x09\xb4\0\0\x38\x01\0\0\xfc\0\0\0\0\0\0\0\0\0\0\0\x60\x01\0\0\
\xfc\0\0\0\x43\x01\0\0\x05\x54\0\0\x10\0\0\0\xdd\0\0\0\x01\0\0\0\0\0\0\0\x10\0\
\0\0\xf7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x57\0\0\
\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8c\0\0\0\0\0\x02\0\x30\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\0\0\x02\0\x60\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7d\0\0\0\x11\0\x03\0\
\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x1a\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x20\0\
\0\0\0\0\0\0\x44\0\0\0\x12\0\x02\0\0\0\0\0\0\0\0\0\x70\x01\0\0\0\0\0\0\xd0\0\0\
\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x40\x01\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\xdc\x02\
\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xf4\x02\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x2c\0\0\0\
\0\0\0\0\0\0\0\0\x04\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x50\0\0\0\0\0\0\
\0\0\0\0\0\x04\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x70\0\0\0\0\0\0\0\0\0\
\0\0\x04\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\xa0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\x04\0\
\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xd0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\xe0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x1c\x01\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xf2\x51\
\xf0\x51\xf1\x51\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\
\x65\x78\x74\0\x2e\x6d\x61\x70\x73\0\x68\x61\x73\x68\x5f\x6d\x61\x70\0\x2e\x6c\
\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\x6e\x73\x65\0\
\x2e\x72\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x73\x65\x63\x75\x72\x69\x74\x79\
\x5f\x6d\x6d\x61\x70\x5f\x66\x69\x6c\x65\0\x6b\x70\x72\x6f\x62\x65\x2e\x62\x70\
\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\
\x5f\x34\0\x4c\x42\x42\x30\x5f\x33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x3d\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\
\x70\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x31\0\0\
\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x01\0\0\0\0\0\0\x0d\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x01\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xe0\x01\0\0\0\0\0\0\x74\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x54\x07\0\0\0\0\0\0\x2c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x6c\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x08\0\
\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x0c\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\
\0\0\0\x39\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x09\0\0\0\0\0\0\
\x20\0\0\0\0\0\0\0\x07\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x74\
\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x09\0\0\0\0\0\0\x20\0\0\0\
\0\0\0\0\x07\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x07\0\0\0\x09\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x09\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\
\x07\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x23\0\0\0\x03\x4c\xff\
\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x70\x0a\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x64\0\0\0\x03\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x76\x0a\0\0\0\0\0\0\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -1;
}

#endif /* __KPROBE_BPF_SKEL_H__ */
